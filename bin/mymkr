#!/bin/bash

########################################################################
# CONFIGURATION
########################################################################
MYMKR_PREFIX=~/.mymkr

CPUS=$(cat /proc/cpuinfo | egrep "^processor" | nl | tail -n1 | cut -f 1)
JOBS="-j$CPUS"


########################################################################
# helper functions
########################################################################
color_black='\E[30m'
color_red='\E[31m'
color_green='\E[32m'
color_yellow='\E[33m'
color_blue='\E[34m'
color_magenta='\E[35m'
color_cyan='\E[36m'
color_white='\E[37m'
color_off='\E[0m'

notice () {
	echo -e "${color_green}[MYMKR NOTICE]${color_off} ${@}"
}

die () {
	echo -e "${color_red}[MYMKR ERROR]${color_off} ${@}"
	exit 1
}

die("TEST")

########################################################################
# build/install MYMKR directory
########################################################################
test -z "$MYMKR_PREFIX" && die "MYMKR_PREFIX is not set"
test ! -d $MYMKR_PREFIX && mkdir $MYMKR_PREFIX
test ! -d $MYMKR_PREFIX/src && mkdir $MYMKR_PREFIX/src
test ! -d $MYMKR_PREFIX/bin && mkdir $MYMKR_PREFIX/bin
E="$MYMKR_PREFIX/mymkr/env"
touch "$E" || die "failed to create MYMKR environment"
echo "MYMKR_PREFIX=$MYMKR_PREFIX" > $E
echo "export MYMKR_PREFIX=\$MYMKR_PREFIX" >> $E
echo "export PKG_CONFIG_PATH=\$MYMKR_PREFIX/lib/pkgconfig" >> $E
echo "export LD_LIBRARY_PATH=\$MYMKR_PREFIX/lib" >> $E
echo "export PATH=\$MYMKR_PREFIX/bin:\$PATH" >> $E
echo "export MANPATH=\$MYMKR_PREFIX/share/man:/usr/share/man" >> $E
echo "export XDG_DATA_DIRS=\$MYMKR_PREFIX/share:\$XDG_DATA_DIRS" >> $E
echo "export PYTHONPATH=\${PYTHONPATH}:\$MYMKR_PREFIX/lib/python2.7/site-packages" >> $E
grep "$MYMKR_PREFIX/env" ~/.bashrc || echo "source $MYMKR_PREFIX/env" >> ~/.bashrc
source $E


########################################################################

D="$MYMKR_PREFIX/mymkr/"

# if package has a directory, install all pkgs inside it first
if [ -d "$D/pkgs/$1" ]
then
	#die (':TODO: implement package defined as directory')
	for x in $(ls $D/pkgs/$1)
	do
		notice(":TODO: mk $x")
	done
fi

# if package has an install script
if [ -f "$D/pkgs/$1.sh" ]
then
	#source "$D/pkgs/$1.sh"
	notice(":TODO: source $D/pkgs/$1.sh")
fi

# if package's install script is inside a directory
# (indicating that the package is usually only installed as a dependency of
# another package but still provide means to compile it directly)
#$P=$(find $D/pkgs -type f -name $1.sh)
#if [ ! -z "$P" ]
#then
#fi

PKGS=$(find $D/pkgs | sed -e 's/.sh//' | sed -e "s/$D//" | uniq)
case $1 in
	*)
		echo "USAGE: $0 <package>"
		echo -e "<package> is one of:"
		echo -e "\tclean   (cleans build related files)"
		for x in $PKGS; do echo -e "\t$x"; done
		exit 1
		;;
esac

exit 0
