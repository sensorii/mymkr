#!/bin/bash
#
# 2013-01-08 04:21:28
# :TODO:
# 	LinuxSampler
#	FluidSynth

source ./mymaker.env
JOBS='-j8'
PKGS="
ctrl
blue
3DII
cegui
CELayoutEditor
gtt
SILLY
Cadence
gmidimonitor
jack_oscrolloscope
IanniX
mididings
non
ogre
wgois
PyMouse
petri-foo
poco
python-uinput
csound.vim
ntk
projectm
mandelbulber
OSC_Data_Monitor
qutecsound
liblo
spinframework
spatosc
cppintrospection
pdsheefa
wxWidgets
bullet
"

test -z "$MYMAKER_PREFIX" && echo "MYMAKER_PREFIX is not set" && exit 1
test ! -d $MYMAKER_PREFIX && mkdir $MYMAKER_PREFIX


########################################################################
# helper functions
########################################################################

# $1: location in /src/ directory (usually package name)
# $2...: all other arguments get appended to the ./configure command
common_autotools () {
	cd $MYMAKER_PREFIX/src/$1 || exit 1
	make clean

	if [ -x "./autogen.sh" ]
	then
		./autogen.sh || exit 1
	fi

	if [ -x "./configure" ]
	then
		./configure --prefix=$MYMAKER_PREFIX ${@:2} || exit 1
		(make $JOBS && make install) || exit 1
	else
		# for packages without a configure script (like jack_oscrolloscope)
		(make $JOBS && make PREFIX=$MYMAKER_PREFIX install) || exit 1
	fi
}

# $1: location in /src/ directory (usually package name)
# $2...: all other arguments get appended to the "setup.py install" command
common_python() {
	cd $MYMAKER_PREFIX/src/$1 || exit 1
	python ./setup.py build || exit 1
	python ./setup.py install --prefix $MYMAKER_PREFIX ${@:2} || exit 1
}


# $1: location in /src/ directory (usually package name)
common_waf() {
	cd $MYMAKER_PREFIX/src/$1 || exit 1
	./waf configure --prefix=$MYMAKER_PREFIX || exit 1
	(./waf build $JOBS && ./waf install) || exit 1
}

# $1: location in /src/ directory (usually package name)
# $2...: all other arguments get appended to the cmake command
common_cmake() {
	cd $MYMAKER_PREFIX/src
	rm -rf $1.build
	test -d $1.build || mkdir $1.build
	cd $MYMAKER_PREFIX/src/$1.build

	cmake -D CMAKE_INSTALL_PREFIX=$MYMAKER_PREFIX ${@:2} ../$1
	make $JOBS && make install
}

# $1: package name
# $2: git url
gitsrc() {
	if [ ! -d $MYMAKER_PREFIX/src/$1 ]
	then
		echo "$1 source dir does not exist, git clone'ing..."
		git clone $2 $MYMAKER_PREFIX/src/$1
	else
		echo "$1 source dir exists, git pull'ing..."
		cd $MYMAKER_PREFIX/src/$1
		git pull
		cd -
	fi
}

# $1: package name
# $2: svn url
svnsrc() {
	if [ ! -d $MYMAKER_PREFIX/src/$1 ]
	then
		echo "$1 source dir does not exist, svn co'ing..."
		svn co $2 $MYMAKER_PREFIX/src/$1
	else
		echo "$1 source dir exists, svn update'ing..."
		cd $MYMAKER_PREFIX/src/$1
		svn update
		cd -
	fi
}

# $1: package name
# $2: hg url
# $3: (optional) hg changeset to update to after initial clone
hgsrc() {
	if [ ! -d $MYMAKER_PREFIX/src/$1 ]
	then
		echo "$1 source dir does not exist, hg clone'ing..."

		cd $MYMAKER_PREFIX/src/ || exit 1
		hg -v clone $2 || exit 1
		# enable progress bars when updating
		echo -e "\n[extensions]\nprogress =\n" >> $1/.hg/hgrc
		cd -

		cd $MYMAKER_PREFIX/src/$1
		test ! -z "$3" && hg update $3
		cd -
	else
		echo "$1 source dir exists, hg pull'ing..."
		cd $MYMAKER_PREFIX/src/$1
		hg -v pull --update
		cd -
	fi
}

# $1: package name
# $2: package version
# $3: URL to package
# $4: packaging postfix, defaults to "tar.gz"
wgetsrc() {
	if [ -z "$4" ]
	then
		PKG='tar.gz'
	else
		PKG=$4
	fi

	if [ ! -d $MYMAKER_PREFIX/src/$1-$2 ]
	then
		cd $MYMAKER_PREFIX/src
		test ! -f $1-$2.$PKG && (wget $3 || exit 1)

		case $PKG in
			tgz|tar.gz)
				tar -xzf $1-$2.$PKG || exit 1
				;;

			tbz2|tar.bz2)
				tar -xjf $1-$2.$PKG || exit 1
				;;
			zip)
				echo ":TODO: wgetsrc .zip" && exit 1
				;;
		esac
	fi
}

########################################################################

case $1 in
	clean)
		for x in $PKGS
		do
			case $x in
				mididings)
					;;

				# these use waf
				non|gmidimonitor)
					D=$MYMAKER_PREFIX/src/$x
					test -d $D && cd $D && ./waf clean
					;;

				# these use cmake
				petri-foo|ogre|ctrl|3DII)
					rm -rf $MYMAKER_PREFIX/src/$x.build
					;;

				# nothing to "clean", its a binary package installed in opt/
				IanniX)
					;;
					
				*)
					D=$MYMAKER_PREFIX/src/$x
					test -d $D && cd $D && make clean
					;;
			esac
		done
		;;

	########################################################################
        # CTRL
        ########################################################################
	ctrl)
		#gitsrc $1 neo@neoharmonix.net:~/SRC/ctrl.git
		common_cmake $1 \
		-D CTRL_DEPENDENCIES_DIR=$MYMAKER_PREFIX
	;;


	########################################################################
        # 3DII
        ########################################################################
	3DII)
		# 2013-03-17 02:14:42 :NOTE: this one currently installs *.cfg
		# files in /x/bin and creates /x/media his is dirty and should
		# be fixed

		#gitsrc $1 neo@neoharmonix.net:~/SRC/ctrl.git
		common_cmake $1 \
		-D 3DII_DEPENDENCIES_DIR=$MYMAKER_PREFIX \
		-D CMAKE_VERBOSE_MAKEFILE=1
	;;


	########################################################################
        # Distributed Time Tracker "git timetrack"
	# http://wadobo.com/trac/dtt
        ########################################################################
	gtt)
		gitsrc $1 http://wadobo.com/repos/gtt.git
		cd /x/src/$1
		PREFIX=$MYMAKER_PREFIX make install
	;;


	########################################################################
        # Crazy Eddy's GUI, editor and deps
        ########################################################################
	cegui)
		#hgsrc $1 http://bitbucket.org/cegui/cegui/ v0-7
		#cd $MYMAKER_PREFIX/src/$1 && sh ./bootstrap
		#common_autotools $1

		hgsrc $1 http://bitbucket.org/cegui/cegui/ v0-8-2
		common_cmake $1
	;;

	CELayoutEditor)
		V=0.7.1
		SRC=http://downloads.sourceforge.net/project/crayzedsgui/$1/$V/$1-$V.tar.gz
		wgetsrc $1 $V $SRC
		common_autotools $1-$V
	;;

	SILLY)
		V=0.1.0
		SRC=http://downloads.sourceforge.net/project/crayzedsgui/$1/$V/$1-$V.tar.gz
		wgetsrc $1 $V $SRC
		common_autotools $1-$V
		;;
        ########################################################################


	# has cool xycontroller GUI
	Cadence)
		gitsrc $1 https://github.com/falkTX/Cadence.git
		cd $MYMAKER_PREFIX/src/$1
		(make && make install DESTDIR=$MYMAKER_PREFIX) || exit 1
		;;


	gmidimonitor)
		gitsrc $1 git://repo.or.cz/gmidimonitor.git
		common_waf $1
		;;


	# http://das.nasophon.de/jack_oscrolloscope/
	# a simple waveform viewer for JACK
	# could serve as simple example for JACK audio input
	jack_oscrolloscope)
		V=0.7
		SRC=http://das.nasophon.de/download/$1-$V.tar.gz
		wgetsrc $1 $V $SRC
		common_autotools $1-$V
		;;


	IanniX)
		#gitsrc $1 https://github.com/iannix/IanniX.git
		# the source looks like it requires qtcreator and lots of deps to build.... so:
		# install binary package in MYMAKER_PREFIX/opt/
		F=iannix_linux__0_8_43.tar.gz
		D=$MYMAKER_PREFIX/opt/$1

		test -f /tmp/$F || (wget -O /tmp/$F http://www.iannix.org/en/download/$F || exit 1)

		rm -rf $D
		test -d $D || mkdir -p $D || exit 1
		cd $MYMAKER_PREFIX/opt/
		tar -xzf /tmp/$F || exit 1

		# create a little starter script in MYMAKER_PREFIX/bin
		S=$MYMAKER_PREFIX/bin/$1
		echo -e "#!/bin/bash\ncd $D\n./IanniX.sh" > $S
		chmod 0755 $S
		;;


	mididings)
		V=20120419
		SRC=http://das.nasophon.de/download/$1-$V.tar.gz
		wgetsrc $1 $V $SRC
		#./setup.py build [--disable-jack-midi] [--disable-alsa-seq] [--enable-smf]
		common_python $1-$V
		;;


	non)
		gitsrc $1 git://git.tuxfamily.org/gitroot/non/non.git
		common_waf $1
		;;

	ntk)
		gitsrc $1 git://git.tuxfamily.org/gitroot/non/fltk.git
		common_waf $1
		;;


	ogre)
		hgsrc $1 http://bitbucket.org/sinbad/ogre/ v1-8-1

		# OGRE_USE_BOOST=OFF  compile fails with:
		# warning: invoking macro POCO_DECLARE_EXCEPTION_CODE argument 1: empty macro arguments are undefined in ISO C90 and ISO C++98
                common_cmake $1 \
		-D OGRE_DEPENDENCIES_DIR=$MYMAKER_PREFIX \
		-D OGRE_BUILD_SAMPLES=0 \
		-D OGRE_INSTALL_SAMPLES=0 \
		-D OGRE_CONFIG_THREADS=2 \
		-D OGRE_CONFIG_MEMTRACK_DEBUG=1

		#-D OGRE_USE_BOOST=ON \
		#-D OGRE_CONFIG_THREAD_PROVIDER=poco \
		;;


	# OIS v1-3 (fails to compile with gcc 4.7 on Xubuntu 12.10)
	##ois)
	##	V=v1-3
	##	SRC=http://downloads.sourceforge.net/project/wgois/Source%20Release/1.3/ois_$V.tar.gz
	##	if [ ! -d $MYMAKER_PREFIX/src/$1-$V ]
	##	then
	##		cd $MYMAKER_PREFIX/src
	##		test ! -f $1_$V.tar.gz && (wget $SRC || exit 1)
	##		tar -xzf $1_$V.tar.gz || exit 1
	##		cd $MYMAKER_PREFIX/src/$1-$V && sh ./bootstrap
	##	fi
	##	common_autotools $1-$V
	##	;;


	# OIS, trunk version
	# :NOTE: 2013-05-18 18:56:46  To compile on Xubuntu 13.04, I had to add
	# "-lX11" to trunk/demos/Makefile.in *_LDADD
	wgois)
		svnsrc wgois https://wgois.svn.sourceforge.net/svnroot/wgois 
		cd $MYMAKER_PREFIX/src/$1/ois/trunk || exit 1
		sh ./bootstrap || exit 1
		common_autotools $1/ois/trunk LIBS='X11'
		;;


	PyMouse)
		gitsrc $1 https://github.com/pepijndevos/PyMouse.git
		common_python $1
		;;


	petri-foo)
		gitsrc $1 https://github.com/jwm-art-net/Petri-Foo.git
		common_cmake $1
		;;


	poco)
                # :NOTE: DO NOT use symlinks anywhere to the source, build will fail with:
		#	 Current working directory not under $PROJECT_BASE.
		V=1.4.6
		SRC=http://pocoproject.org/releases/$1-$V/$1-$V.tar.gz
		wgetsrc $1 $V $SRC
		common_autotools $1-$V --omit=Data/ODBC,Data/MySQL --no-tests --no-samples
		;;


	python-uinput)
		gitsrc $1 https://github.com/tuomasjjrasanen/python-uinput.git
		common_python $1
		;;

	blue)
		V=2.4.3
		SRC=http://downloads.sourceforge.net/project/bluemusic/blue/2.4.x/blue_2.4.3.zip
		wgetsrc $1 $V $SRC
		;;

	#zynaddsubfx)
	#	gitsrc $1 git://git.code.sf.net/p/zynaddsubfx/instruments zynaddsubfx-instruments
	#	;;

	csound.vim)
		PKG='csound.vim.tar.gz'
		SRC='http://www.eumus.edu.uy/docentes/jure/csound/vim/csound.vim.tar.gz'

		cd $MYMAKER_PREFIX/src
		test ! -f $PKG && wget $SRC
		test ! -d $1 && mkdir $1
		cd $1
		tar -xzf ../$PKG

		for x in ./*/*.vim
		do
			sed -i -e 's/$VIM\//~\/.vim\//' $x
		done

		test ! -d ~/.vim/vimfiles && mkdir ~/.vim/vimfiles
		rsync -av $MYMAKER_PREFIX/src/$1/ ~/.vim/vimfiles/

		echo -e "\nNOTE: you must add some things to your .vimrc to enable some functionality."
		echo -e "Reference: http://www.eumus.edu.uy/docentes/jure/csound/vim/readme.html\n"
		;;

	projectm)
		gitsrc $1 git://git.code.sf.net/p/projectm/code

		# mod'd common_cmake:
		cd $MYMAKER_PREFIX/src
		rm -rf $1.build
		test -d $1.build || mkdir $1.build
		cd $MYMAKER_PREFIX/src/$1.build
		cmake -D CMAKE_INSTALL_PREFIX=$MYMAKER_PREFIX -D INCLUDE-PROJECTM-JACK=ON -D USE_CG=ON ../$1/src
		make $JOBS && make install
		;;

	mandelbulber)
		svnsrc $1 http://mandelbulber.googlecode.com/svn/trunk
		cd $MYMAKER_PREFIX/src/$1/makefiles
		make clean
		make -j1 || exit 1
		#(make $JOBS && make PREFIX=$MYMAKER_PREFIX install) || exit 1
		;;

	OSC_Data_Monitor)
		# NOTE: this is not compiled, source is retrieved everytime this is run
		SRC='http://osc-tools.googlecode.com/files/OSC_Data_Monitor.linux.zip'
		cd $MYMAKER_PREFIX/src
		rm -rf OSC_Data_Monitor.linux*
		wget $SRC
		unzip OSC_Data_Monitor.linux.zip
		
		# create a little starter script in MYMAKER_PREFIX/bin
		S="$MYMAKER_PREFIX/bin/$1"
		D="$MYMAKER_PREFIX/src/OSC_Data_Monitor.linux/application.linux64"
		echo -e "#!/bin/bash\ncd $D\n./OSC_Data_Monitor" > $S
		chmod 0755 $S
		;;

	qutecsound)
		#gitsrc $1 git://qutecsound.git.sourceforge.net/gitroot/qutecsound/qutecsound
		#svnsrc $1 https://qutecsound.svn.sourceforge.net/svnroot/qutecsound
		cd $MYMAKER_PREFIX/src/$1/trunk/$1
		qmake-qt4 qcs.pro CONFIG+=buildDoubles LIBSNDFILE_LIBRARY_DIR="/usr/lib/x86_64-linux-gnu"
		#qmake-qt4 qcs.pro \
		#	CONFIG+=buildDoubles \
		#	CONFIG+=pythonqt \
		#	LIBSNDFILE_LIBRARY_DIR="/usr/lib/x86_64-linux-gnu" \
		#	PYTHONQT_TREE_DIR="/usr/include/PythonQt"
		#	# CONFIG+=rtmidi \
		#	# RTMIDI_DIR="/usr/include"
		(make $JOBS && make PREFIX=$MYMAKER_PREFIX install) || exit 1
		cp bin/CsoundQt-d $MYMAKER_PREFIX/bin/CsoundQt
		;; 

	liblo)
		gitsrc $1 git://git.code.sf.net/p/liblo/git
		common_autotools $1
		;;


	#######################################################################
	# SPIN framework
	#######################################################################

	# spinframework dependency
	# C++ library that controls various 3D audio spatializers
	spatosc)
		gitsrc $1 git://code.sat.qc.ca/spatosc.git
		common_autotools $1
		;;

	# spinframework dependency
	cppintrospection)
		#gitsrc $1 https://github.com/sat-metalab/cppintrospection.git
		common_autotools $1 --with-frameworks
		;;

	spinframework)
		# use "-j1" if enable-editor
		JOBS='-j1'
		#gitsrc $1 https://code.sat.qc.ca/redmine/spinframework.git
		common_autotools $1 --enable-editor
		#common_autotools $1
		;;

	# puredata spinframework stuff
	pdsheefa)
		gitsrc $1 https://code.sat.qc.ca/redmine/pdsheefa.git
		cd $MYMAKER_PREFIX/src/$1 || exit 1

		# for the non-lite version:
		# make all || exit 1

		make || exit 1
		make PREFIX=$MYMAKER_PREFIX install
		;;

	# wxWidgets >= 2.9.0, spinframework editor dependency
	wxWidgets)
		V=2.9.5
		SRC=http://downloads.sourceforge.net/project/wxwindows/$V/$1-$V.tar.bz2
		wgetsrc $1 $V $SRC tar.bz2
		common_autotools $1-$V \
			--enable-unicode \
			--enable-propgrid \
			--enable-grid \
			--enable-stl \
			--enable-threads \
			--enable-mediactrl \
			--enable-animatectrl \
			--with-libpng \
			--with-libjpeg \
			--with-zlib \
			--with-libnotify \
			--with-opengl

		;;

	# bullet 3D physics library 2.x
	# spinframework needs 2.78 (as of 2013-08-29)
	bullet)
		#svnsrc $1 http://bullet.googlecode.com/svn/trunk/ 
		#svnsrc $1 http://bullet.googlecode.com/svn/tags/bullet-2.81
		svnsrc $1 http://bullet.googlecode.com/svn/tags/bullet-2.78
		#common_autotools $1 --enable-multithreaded
		common_autotools $1
		;;

	# :TODO: scenic	
	scenic)
		echo ":TODO:"
		;;

	*)
		echo "USAGE: $0 <package>"
		echo -e "<package> is one of:"
		echo -e "\tclean   (cleans build related files)"
		for x in $PKGS; do echo -e "\t$x"; done
		exit 1
		;;
esac

exit 0
