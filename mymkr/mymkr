#!/bin/bash

########################################################################
# CONFIGURATION
########################################################################
MYMKR_PREFIX=~/.mymkr

CPUS=$(cat /proc/cpuinfo | egrep "^processor" | nl | tail -n1 | cut -f 1)
JOBS="-j$CPUS"


########################################################################
# core functions
########################################################################
color_black='\E[30m'
color_red='\E[31m'
color_green='\E[32m'
color_yellow='\E[33m'
color_blue='\E[34m'
color_magenta='\E[35m'
color_cyan='\E[36m'
color_white='\E[37m'
color_off='\E[0m'

msg_info () {
	echo -e "${color_green}[MYMKR:INFO]${color_off} ${@}"
}

msg_warning () {
	echo -e "${color_yellow}[MYMKR:WARNING]${color_off} ${@}"
}

msg_error () {
	echo -e "${color_red}[MYMKR:ERROR]${color_off} ${@}"
}

die () {
	msg_error ${@}
	exit 1
}

# build/install MYMKR directory
mymkr_build_env ()
{
	test -z "$MYMKR_PREFIX" && die "MYMKR_PREFIX is not set"
	test ! -d $MYMKR_PREFIX && mkdir $MYMKR_PREFIX
	test ! -d $MYMKR_PREFIX/src && mkdir $MYMKR_PREFIX/src
	test ! -d $MYMKR_PREFIX/bin && mkdir $MYMKR_PREFIX/bin
	E="$MYMKR_PREFIX/mymkr/env"
	if [ ! -f "$E" ]
	then
		msg_info "MYMKR environment definition ($E) does no exist, creating"
		touch "$E" || die "failed to create MYMKR environment"
		echo "MYMKR_PREFIX=$MYMKR_PREFIX" > $E
		echo "export MYMKR_PREFIX=\$MYMKR_PREFIX" >> $E
		echo "export PKG_CONFIG_PATH=\$MYMKR_PREFIX/lib/pkgconfig" >> $E
		echo "export LD_LIBRARY_PATH=\$MYMKR_PREFIX/lib" >> $E
		echo "export PATH=\$MYMKR_PREFIX/bin:\$PATH" >> $E
		echo "export MANPATH=\$MYMKR_PREFIX/share/man:/usr/share/man" >> $E
		echo "export XDG_DATA_DIRS=\$MYMKR_PREFIX/share:\$XDG_DATA_DIRS" >> $E
		echo "export PYTHONPATH=\${PYTHONPATH}:\$MYMKR_PREFIX/lib/python2.7/site-packages" >> $E
		grep "$E" ~/.bashrc || echo "source $E" >> ~/.bashrc
	fi
	source $E
}

# $1: a directory containing bash files to source (must be a subdirectory of mymkr/)
mymkr_source ()
{
	D="$MYMKR_PREFIX/mymkr"
	for x in $(find $D/$1 -mindepth 1 | egrep "\.sh$")
	do
		msg_info "source: $1/$(basename $x)"
		source $x
	done
}

# $1: a directory of MYMKR package definitions
mymkr_get_pkgs ()
{
	test -z "$1" && die "get_pkgs: invalid paramaters"
	for x in $(find $1 -mindepth 1)
	do
		basename $x | sed -e 's/.sh//' 
	done
}

########################################################################
mymkr_source 'fetch'
mymkr_source 'common'
mymkr_build_env
D="$MYMKR_PREFIX/mymkr"
PKGS=$(mymkr_get_pkgs "$D/pkgs/")

# enforce proper paramaters
if [ -z "$1" ]
then
	echo "USAGE: $0 <package>"
	echo -e "<package> is one of:"
	#echo -e "\tclean   (cleans build related files)"
	for x in $PKGS; do echo -e "\t$x"; done
	exit 1
fi

# if package has a directory, install all pkgs inside it first
if [ -d "$D/pkgs/$1" ]
then
	#die (':TODO: implement package defined as directory')
	for x in $(ls $D/pkgs/$1)
	do
		msg_info ":TODO: mk $x"
	done
fi

# if package has an install script
if [ -f "$D/pkgs/$1.sh" ]
then
	msg_info "source $D/pkgs/$1.sh"
	source "$D/pkgs/$1.sh"
fi

# if package's install script is inside a directory
# (indicating that the package is usually only installed as a dependency of
# another package but still provide means to compile it directly)
#$P=$(find $D/pkgs -type f -name $1.sh)
#if [ ! -z "$P" ]
#then
#fi


exit 0
